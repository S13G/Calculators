/**
 * Renders the final summary section with all the budget details.
 * @param {object} budget - The final, comprehensive budget object.
 */
 // Was the last line in the updateFinalCalculations function
function displayFinalSummary(budget) {
  const allocations =
    budget.custom_allocations || budget.recommended_allocations;

  const summaryHTML = `
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="space-y-4">
                <h3 class="text-lg font-semibold text-white border-b pb-2">Income & Taxes</h3>
                <div class="space-y-2 text-sm">
                    <p><strong>Annual Gross Income:</strong> ${formatCurrency(
                      budget.annual_income
                    )}</p>
                    <p><strong>Total Tax Deductions:</strong> ${formatCurrency(
                      budget.total_deductions
                    )}</p>
                    <p><strong>Monthly Take-Home:</strong> <span class="text-blue-600 font-bold">${formatCurrency(
                      budget.monthly_disposable
                    )}</span></p>
                </div>
            </div>

            <div class="space-y-4">
                <h3 class="text-lg font-semibold text-white border-b pb-2">Monthly Allocation</h3>
                <div class="space-y-2 text-sm">
                    <p><strong>Living Expenses:</strong> ${formatCurrency(
                      budget.total_monthly_expenses
                    )} (${formatPercentage(budget.expenses_percentage)})</p>
                    <p><strong>Savings:</strong> ${formatCurrency(
                      allocations.monthly_savings
                    )}</p>
                    <p><strong>Investments:</strong> ${formatCurrency(
                      allocations.monthly_investments
                    )}</p>
                    <p><strong>Cashflow:</strong> <span class="text-green-600 font-bold">${formatCurrency(
                      allocations.monthly_cashflow
                    )}</span></p>
                </div>
            </div>
        </div>

        <div class="mt-6 p-4 rounded-lg  text-black ${
          budget.budget_zone === "GREEN"
            ? "bg-green-50 border border-green-200"
            : budget.budget_zone === "MODERATE"
            ? "bg-yellow-50 border border-yellow-200"
            : "bg-red-50 border border-red-200"
        }">
            <div class="flex items-center mb-2">
                <span class="status-badge ${
                  budget.budget_zone === "GREEN"
                    ? "green-zone"
                    : budget.budget_zone === "MODERATE"
                    ? "moderate-zone"
                    : "red-zone"
                }">${budget.budget_zone}</span>
            </div>
            <p class="text-sm ${
              budget.budget_zone === "GREEN"
                ? "text-green-700"
                : budget.budget_zone === "MODERATE"
                ? "text-yellow-700"
                : "text-red-700"
            }">${budget.status_message}</p>
        </div>
    `;

  // finalSummaryContentDiv.innerHTML = summaryHTML;
  // finalSummarySection.classList.remove("hidden");
}








// Was inside initialize app function
/**
 * Dynamically creates the input fields for all living expense categories.
 */
function createExpenseInputs() {
  // excludeRetirementCheckbox.value = "no";
  expenseInputsContainer.innerHTML = "";
  livingExpenseCategories.forEach((category) => {
    const categoryId = category.toLowerCase().replace(/\s+/g, "-");
    const inputGroup = document.createElement("div");
    inputGroup.className = "input-group";

    const label = document.createElement("label");
    label.setAttribute("for", `${categoryId}-input`);
    // Add a span inside the label to hold the percentage
    label.innerHTML = `
  <div class="flex items-center justify-between mb-2">
    <span class="text-white text-base font-semibold">
      ${category.replace(/([A-Z])/g, " $1").trim()}
    </span>
    <span id="percentage-${categoryId}" class="text-sm font-medium text-white">
      <!-- percentage will go here -->
    </span>
  </div>
`;

    const input = document.createElement("input");
    input.type = "number";
    input.id = `${categoryId}-input`;
    input.className =
      "input-field w-full pl-8 pr-4 px-2 py-4 bg-white/5 border border-white/20 rounded-2xl text-white placeholder-[#FFFFFF80] focus:outline-none focus:border-primary input-glow transition-all duration-200";
    input.placeholder = "e.g., 500";
    input.min = "0";
    input.step = "0.01";

    const errorP = document.createElement("p");
    errorP.className = "error-message";
    errorP.id = `${categoryId}-error`;

    inputGroup.appendChild(label);
    inputGroup.appendChild(input);
    inputGroup.appendChild(errorP);
    expenseInputsContainer.appendChild(inputGroup);

    livingExpenses[category] = 0;

    input.addEventListener("input", () => {
      const value = parseFloat(input.value) || 0;
      livingExpenses[category] = value;
      updateExpenseSummary();
      updateFinalCalculations();
      updateExpensePercentageLabels(); // Update percentages on each expense input
    });
  });
}



// iN DOM ELEMENTS SECTION
const expenseInputsContainer = document.getElementById(
  "expense-inputs-container"
);
const livingExpenseCategories = [
  "Mortgage/Rent",
  "Transport",
  "Insurance",
  "Utilities",
  "Groceries",
  "Entertainment",
  "Phone Bill",
  "Internet Bill",
  "Home Maintenance",
  "Miscellaneous",
];
const finalSummarySection = document.getElementById("final-summary-section");
const finalSummaryContentDiv = document.getElementById("final-summary-content");



// UNDER INITIALIZE PROVINCE DROPDOWN
/**
 * Updates the percentage display next to each expense label.
 */
function updateExpensePercentageLabels() {
  if (calculatorState.monthlyDisposableIncome <= 0) {
    // If there's no income, clear all percentage labels
    livingExpenseCategories.forEach((category) => {
      const categoryId = category.toLowerCase().replace(/\s+/g, "-");
      const percentageSpan = document.getElementById(
        `percentage-${categoryId}`
      );
      if (percentageSpan) percentageSpan.textContent = "";
    });
    return;
  }

  // Update each label with the new percentage
  Object.entries(livingExpenses).forEach(([category, value]) => {
    const categoryId = category.toLowerCase().replace(/\s+/g, "-");
    const percentageSpan = document.getElementById(`percentage-${categoryId}`);

    if (percentageSpan) {
      if (value > 0) {
        const percentage =
          (value / calculatorState.monthlyDisposableIncome) * 100;
        // percentageSpan.className = "text-white";
        percentageSpan.textContent = `(${percentage.toFixed(1)}%)`;
      } else {
        percentageSpan.textContent = ""; // Clear if value is zero
      }
    }
  });
}

// Put this under Show/enable subsequent sections
updateExpenseSummary(); // This now also handles setting S&I recommendations
updateExpensePercentageLabels(); // Update percentages based on new income
*/

/**
 * Updates the expense summary box with totals, percentages, and the budget zone.
 * It also sets the recommended values for savings and investments if not manually edited.
 */
function updateExpenseSummary() {
  if (calculatorState.monthlyDisposableIncome <= 0) return;

  // Calculate totals and percentages
  calculatorState.totalMonthlyExpensesEntered = Object.values(
    livingExpenses
  ).reduce((sum, val) => sum + val, 0);
  const expensesPercentage =
    calculatorState.monthlyDisposableIncome <= 0
      ? Infinity
      : (calculatorState.totalMonthlyExpensesEntered /
          calculatorState.monthlyDisposableIncome) *
        100;

  const [zone, status, savingsAllowed, investmentsAllowed] =
    determineBudgetZoneAndOptions(expensesPercentage);

  // Set recommended savings/investments if user hasn't edited them
  if (!calculatorState.isSavingsCustom) {
    savingsPercentageInput.value = savingsAllowed ? 12 : "";
  }
  if (!calculatorState.isInvestmentsCustom) {
    investmentsPercentageInput.value = investmentsAllowed ? 15 : "";
  }

  // Update summary UI
  currentTotalExpensesSpan.textContent = formatCurrency(
    calculatorState.totalMonthlyExpensesEntered
  );
  currentExpensesPercentageSpan.textContent =
    formatPercentage(expensesPercentage);

  // Update budget zone badge and styling
  currentBudgetZoneSpan.className = "status-badge"; // Reset classes
  currentBudgetZoneSpan.textContent = zone;
  currentZoneMessageP.textContent = status;

  if (zone === "GREEN") {
    currentBudgetZoneSpan.classList.add("green-zone");
    integratedExpenseSummary.className =
      "expense-summary-box mt-8 glass-effect p-4 rounded-xl bg-green-500 text-white animate-slide-up";
    livingExpensesSection.className =
      "bg-green-500 rounded-3xl p-6 md:p-8 transition-colors duration-500 ease-in-out mt-10";
  } else if (zone === "MODERATE") {
    currentBudgetZoneSpan.classList.add("moderate-zone");
    integratedExpenseSummary.className =
      "expense-summary-box mt-8 glass-effect p-4 rounded-xl bg-yellow-500 text-white animate-slide-up ";
    livingExpensesSection.className =
      "bg-yellow-500  rounded-3xl p-6 md:p-8 transition-colors duration-500 ease-in-out mt-10";
  } else {
    currentBudgetZoneSpan.classList.add("red-zone");
    integratedExpenseSummary.className =
      "expense-summary-box mt-8 glass-effect p-4 rounded-xl bg-red-500 text-white animate-slide-up";
    livingExpensesSection.className =
      "bg-red-500  rounded-3xl p-6 md:p-8 transition-colors duration-500 ease-in-out mt-10";
  }

  integratedExpenseSummary.classList.remove("hidden");

  if (calculatorState.totalMonthlyExpensesEntered > 0) {
    enableSavingsInvestmentsSection(zone);
  }
}


/**
 * Enables and configures the savings/investments section based on the budget zone.
 * @param {string} budgetZone - The current budget zone ('GREEN', 'MODERATE', or 'RED').
 */
function enableSavingsInvestmentsSection(budgetZone) {
  savingsInvestmentsSection.classList.remove(
    "opacity-50",
    "pointer-events-none"
  );
  savingsInvestmentsSection.classList.add("animate-fade-in");
  navCTA.classList.remove("hidden");
  navCTA.classList.add("block");

  if (budgetZone === "GREEN") {
    siGuidanceP.textContent =
      "Great! You have room for both savings and investments.";
    savingsPercentageInput.disabled = false;
    investmentsPercentageInput.disabled = false;
  } else if (budgetZone === "MODERATE") {
    siGuidanceP.textContent =
      "Focus on savings first. Investments can wait until your budget improves.";
    savingsPercentageInput.disabled = false;
    investmentsPercentageInput.disabled = true;
  } else {
    siGuidanceP.textContent =
      "Focus on reducing expenses and building emergency cashflow first.";
    savingsPercentageInput.disabled = true;
    investmentsPercentageInput.disabled = true;
  }
}










// put in claude
const livingExpenses = {};


function determineBudgetZoneAndOptions(expensesPercentage) {
  if (expensesPercentage <= 70) {
    return ["GREEN", "You have excellent financial flexibility.", true, true];
  } else if (expensesPercentage <= 80) {
    return [
      "MODERATE",
      "Focus on savings and maintaining cashflow.",
      true,
      false,
    ];
  } else {
    return ["RED", "Prioritize cashflow and expense reduction.", false, false];
  }
}


function allocateFunds(
  monthlyDisposable,
  totalMonthlyExpenses,
  savingsPctDesired,
  investmentsPctDesired
) {
  let monthlySavings = 0;
  let monthlyInvestments = 0;
  let monthlyCashflow = 0;

  const remainingAfterExpenses = monthlyDisposable - totalMonthlyExpenses;
  const minCashflowPct = 0.1;
  const minCashflowAmount = monthlyDisposable * minCashflowPct;
  let hasAdequateCashflow = false;

  if (remainingAfterExpenses < minCashflowAmount) {
    monthlyCashflow = remainingAfterExpenses;
    hasAdequateCashflow = false;
    monthlySavings = 0;
    monthlyInvestments = 0;
  } else {
    monthlyCashflow = minCashflowAmount;
    let availableForSI = remainingAfterExpenses - monthlyCashflow;
    const minRequiredSavings =
      savingsPctDesired > 0 ? monthlyDisposable * 0.1 : 0;
    const minRequiredInvestments =
      investmentsPctDesired > 0 ? monthlyDisposable * 0.1 : 0;
    const totalMinSIRequired = minRequiredSavings + minRequiredInvestments;

    if (availableForSI >= totalMinSIRequired) {
      monthlySavings = minRequiredSavings;
      monthlyInvestments = minRequiredInvestments;
      availableForSI -= totalMinSIRequired;

      let remainingDesiredSavings =
        (monthlyDisposable * savingsPctDesired) / 100 - monthlySavings;
      let remainingDesiredInvestments =
        (monthlyDisposable * investmentsPctDesired) / 100 - monthlyInvestments;
      remainingDesiredSavings = Math.max(0, remainingDesiredSavings);
      remainingDesiredInvestments = Math.max(0, remainingDesiredInvestments);
      const totalRemainingDesired =
        remainingDesiredSavings + remainingDesiredInvestments;

      if (totalRemainingDesired > 0 && availableForSI > 0) {
        const scaleFactor = Math.min(1, availableForSI / totalRemainingDesired);
        monthlySavings += remainingDesiredSavings * scaleFactor;
        monthlyInvestments += remainingDesiredInvestments * scaleFactor;
      } else if (availableForSI > 0) {
        monthlyCashflow += availableForSI;
      }
    } else {
      const totalDesiredSIToScale =
        (monthlyDisposable * savingsPctDesired) / 100 +
        (monthlyDisposable * investmentsPctDesired) / 100;
      if (totalDesiredSIToScale > 0) {
        const scaleFactor = availableForSI / totalDesiredSIToScale;
        monthlySavings =
          ((monthlyDisposable * savingsPctDesired) / 100) * scaleFactor;
        monthlyInvestments =
          ((monthlyDisposable * investmentsPctDesired) / 100) * scaleFactor;
      } else {
        monthlySavings = 0;
        monthlyInvestments = 0;
      }
    }

    monthlyCashflow =
      monthlyDisposable -
      totalMonthlyExpenses -
      monthlySavings -
      monthlyInvestments;
    hasAdequateCashflow = monthlyCashflow >= minCashflowAmount;
  }

  return {
    monthly_savings: Math.max(0, monthlySavings),
    monthly_investments: Math.max(0, monthlyInvestments),
    monthly_cashflow: Math.max(0, monthlyCashflow),
    has_adequate_cashflow: hasAdequateCashflow,
    min_cashflow_amount: minCashflowAmount,
    remaining_unallocated: 0,
  };
}


function calculateBudget(
  annualIncome,
  province,
  livingExpenses,
  retirementPercentage = 0,
  userSavingsPct = null,
  userInvestmentsPct = null
) {
  const { deductions, totalDeductions } = calculateTaxes(
    annualIncome,
    province,
    retirementPercentage
  );
  const annualDisposable = annualIncome - totalDeductions;
  const monthlyDisposable = annualDisposable / 12;
  const totalMonthlyExpenses = Object.values(livingExpenses).reduce(
    (sum, val) => sum + val,
    0
  );
  const expensesPercentage =
    monthlyDisposable <= 0
      ? Infinity
      : (totalMonthlyExpenses / monthlyDisposable) * 100;

  const [zone, status, savingsAllowed, investmentsAllowed] =
    determineBudgetZoneAndOptions(expensesPercentage);

  const recommendedSavingsPct = 12;
  const recommendedInvestmentsPct = 15;
  const effectiveRecSavingsPct = savingsAllowed ? recommendedSavingsPct : 0;
  const effectiveRecInvestmentsPct = investmentsAllowed
    ? recommendedInvestmentsPct
    : 0;

  const recommendedAllocations = allocateFunds(
    monthlyDisposable,
    totalMonthlyExpenses,
    effectiveRecSavingsPct,
    effectiveRecInvestmentsPct
  );

  let customAllocations = null;
  if (
    (savingsAllowed && userSavingsPct !== null) ||
    (investmentsAllowed && userInvestmentsPct !== null)
  ) {
    const userSavingsPctValidated =
      savingsAllowed && userSavingsPct !== null
        ? validateSavingsPercentage(userSavingsPct, true)
        : null;
    const userInvestmentsPctValidated =
      investmentsAllowed && userInvestmentsPct !== null
        ? validateInvestmentsPercentage(userInvestmentsPct, true)
        : null;

    if (
      (userSavingsPctValidated !== null &&
        userSavingsPctValidated >= 10 &&
        userSavingsPctValidated <= 15) ||
      (userInvestmentsPctValidated !== null &&
        userInvestmentsPctValidated >= 10 &&
        userInvestmentsPctValidated <= 20)
    ) {
      const finalCustomSavingsPct =
        userSavingsPctValidated !== null ? userSavingsPctValidated : 0;
      const finalCustomInvestmentsPct =
        userInvestmentsPctValidated !== null ? userInvestmentsPctValidated : 0;
      if (finalCustomSavingsPct > 0 || finalCustomInvestmentsPct > 0) {
        customAllocations = allocateFunds(
          monthlyDisposable,
          totalMonthlyExpenses,
          finalCustomSavingsPct,
          finalCustomInvestmentsPct
        );
      }
    }
  }

  return {
    annual_income: annualIncome,
    province: province,
    deductions: deductions,
    total_deductions: totalDeductions,
    annual_disposable: annualDisposable,
    monthly_disposable: monthlyDisposable,
    living_expenses: livingExpenses,
    total_monthly_expenses: totalMonthlyExpenses,
    expenses_percentage: expensesPercentage,
    budget_zone: zone,
    status_message: status,
    savings_allowed: savingsAllowed,
    investments_allowed: investmentsAllowed,
    recommended_allocations: recommendedAllocations,
    custom_allocations: customAllocations,
    retirement_percentage: retirementPercentage,
  };
}
const annualIncomeInput = document.getElementById("annualIncome");
const provinceSelect = document.getElementById("provinceSelect");
const annualIncomeError = document.getElementById("annualIncomeError");
const provinceError = document.getElementById("provinceError");
const includeRetirementCheckbox = document.getElementById("includeRetirement");
const deductonToggle = document.getElementById("deduction-toggle");
const excludeRetirementCheckbox = document.getElementById("excludeRetirement");
const navCTA = document.getElementById("cta");
const retirementPercentageSection = document.getElementById(
  "retirement-percentage-section"
);
const retirementPercentageInput = document.getElementById(
  "retirementPercentage"
);
const retirementPercentageError = document.getElementById(
  "retirementPercentageError"
);

const deductionsDisposableSection = document.getElementById(
  "deductions-disposable-section"
);
const totalAnnualDeductionsSpan = document.getElementById(
  "totalAnnualDeductions"
);
const deductionInputsContainer = document.getElementById(
  "deduction-inputs-container"
);
const annualDisposableIncomeSpan = document.getElementById(
  "annualDisposableIncome"
);
const monthlyDisposableIncomeSpan = document.getElementById(
  "monthlyDisposableIncome"
);

const integratedExpenseSummary = document.getElementById(
  "integrated-expense-summary"
);
const currentTotalExpensesSpan = document.getElementById(
  "currentTotalExpenses"
);
const currentExpensesPercentageSpan = document.getElementById(
  "currentExpensesPercentage"
);
const currentBudgetZoneSpan = document.getElementById("currentBudgetZone");
const currentZoneMessageP = document.getElementById("currentZoneMessage");

const savingsInvestmentsSection = document.getElementById(
  "savings-investments-section"
);
const siGuidanceP = document.getElementById("si-guidance");
const savingsPercentageInput = document.getElementById("savingsPercentage");
const savingsPercentageError = document.getElementById(
  "savingsPercentageError"
);
const investmentsPercentageInput = document.getElementById(
  "investmentsPercentage"
);
const livingExpensesSection = document.getElementById(
  "living-expenses-section"
);
const integratedExpenseSummary = document.getElementById(
  "integrated-expense-summary"
);
const currentTotalExpensesSpan = document.getElementById(
  "currentTotalExpenses"
);
const currentExpensesPercentageSpan = document.getElementById(
  "currentExpensesPercentage"
);
const currentBudgetZoneSpan = document.getElementById("currentBudgetZone");
const currentZoneMessageP = document.getElementById("currentZoneMessage");

const savingsInvestmentsSection = document.getElementById(
  "savings-investments-section"
);
const siGuidanceP = document.getElementById("si-guidance");
const investmentsPercentageError = document.getElementById(
  "investmentsPercentageError"
);
const cashflowAmountInput = document.getElementById("cashflowAmount");
const cashflowCTA = document.getElementById("cashflow-cta");
const cashflowSavingPercentage = document.getElementById(
  "cashflow-saving-percentage"
);
const cashflowSavingPrice = document.getElementById("cashflow-saving-price");

const taxConfig = TAX_CONFIG.canada.provinces;
function validateSavingsPercentage(value, returnNull = false) {
  const val = parseFloat(value);
  const isValid = !isNaN(val) && val >= 10 && val <= 15;
  if (returnNull) return isValid ? val : null;

  if (savingsPercentageInput.value !== "" && !isValid) {
    showError(
      savingsPercentageError,
      "Savings percentage must be between 10% and 15%."
    );
    return false;
  }
  clearError(savingsPercentageError);
  return true;
}
function showError(element, message) {
  element.textContent = message;
  element.style.display = "block";
}

function clearError(element) {
  element.textContent = "";
  element.style.display = "none";
}

function formatCurrency(amount) {
  return new Intl.NumberFormat("en-CA", {
    style: "currency",
    currency: "CAD",
  }).format(amount);
}
function formatPercentage(percentage) {
  return `${percentage.toFixed(1)}%`;
}

/**
 * Validates the user-entered savings percentage.
 * @param {number|string} value - The input value.
 * @param {boolean} [returnNull=false] - If true, returns the parsed value or null. Otherwise, returns boolean for DOM validation.
 * @returns {boolean|number|null}
 */
function validateSavingsPercentage(value, returnNull = false) {
  const val = parseFloat(value);
  const isValid = !isNaN(val) && val >= 10 && val <= 15;
  if (returnNull) return isValid ? val : null;

  if (savingsPercentageInput.value !== "" && !isValid) {
    showError(
      savingsPercentageError,
      "Savings percentage must be between 10% and 15%."
    );
    return false;
  }
  clearError(savingsPercentageError);
  return true;
}

/**
 * Validates the user-entered investments percentage.
 * @param {number|string} value - The input value.
 * @param {boolean} [returnNull=false] - If true, returns the parsed value or null. Otherwise, returns boolean for DOM validation.
 * @returns {boolean|number|null}
 */
function validateInvestmentsPercentage(value, returnNull = false) {
  const val = parseFloat(value);
  const isValid = !isNaN(val) && val >= 10 && val <= 20;
  if (returnNull) return isValid ? val : null;

  if (investmentsPercentageInput.value !== "" && !isValid) {
    showError(
      investmentsPercentageError,
      "Investments percentage must be between 10% and 20%."
    );
    return false;
  }
  clearError(investmentsPercentageError);
  return true;
}



// ===================================================================================
// UI UPDATE AND EVENT HANDLER FUNCTIONS

// These functions are called by event listeners to update the UI in response to user input.
// ===================================================================================

/**
 * Main handler for income/province/retirement changes.
 * It re-calculates taxes and disposable income, and updates the UI and application state.
 */
function updateIncomeCalculations() {
  if (
    !validateAnnualIncome() ||
    !validateProvince() ||
    !validateRetirementPercentage()
  ) {
    return;
  }

  // Read inputs from DOM and update state
  calculatorState.annualIncome = parseFloat(annualIncomeInput.value);
  calculatorState.province = provinceSelect.value;
  calculatorState.retirementPercentage = includeRetirementCheckbox.checked
    ? parseFloat(retirementPercentageInput.value) || 0
    : 0;

  // Perform calculations
  const { deductions, totalDeductions } = calculateTaxes(
    calculatorState.annualIncome,
    calculatorState.province,
    calculatorState.retirementPercentage
  );

  // Update state with calculation results
  calculatorState.annualDisposable =
    calculatorState.annualIncome - totalDeductions;
  calculatorState.monthlyDisposableIncome =
    calculatorState.annualDisposable / 12;

  // Update UI
  createDeductionInputs(deductions);
  totalAnnualDeductionsSpan.textContent = formatCurrency(totalDeductions);
  annualDisposableIncomeSpan.textContent = formatCurrency(
    calculatorState.annualDisposable
  );
  monthlyDisposableIncomeSpan.textContent = formatCurrency(
    calculatorState.monthlyDisposableIncome
  );

  // Show/enable subsequent sections
  deductionsDisposableSection.classList.remove("hidden");
  enableLivingExpensesSection();
  updateFinalCalculations();
}
/*
 * Triggers the final budget calculation and displays the comprehensive summary.
*/
function updateFinalCalculations() {
  if (calculatorState.monthlyDisposableIncome <= 0) return;

  const userSavingsPct = savingsPercentageInput.value
    ? parseFloat(savingsPercentageInput.value)
    : null;
  const userInvestmentsPct = investmentsPercentageInput.value
    ? parseFloat(investmentsPercentageInput.value)
    : null;

  const budget = calculateBudget(
    calculatorState.annualIncome,
    calculatorState.province,
    livingExpenses,
    calculatorState.retirementPercentage,
    userSavingsPct,
    userInvestmentsPct
  );

  cashflowCTA.classList.remove("hidden");
  cashflowCTA.classList.add("block");

  // Update cashflow display
  const allocations =
    budget.custom_allocations || budget.recommended_allocations;
  const cashflowPercentage =
    calculatorState.monthlyDisposableIncome <= 0
      ? 0
      : (allocations.monthly_cashflow /
          calculatorState.monthlyDisposableIncome) *
        100;

  cashflowAmountInput.value = `${formatCurrency(
    allocations.monthly_cashflow
  )} (${formatPercentage(cashflowPercentage)})`;

  cashflowSavingPercentage.textContent = `${cashflowPercentage.toFixed(1)}%`;
  cashflowSavingPrice.textContent = `${formatCurrency(
    allocations.monthly_cashflow
  )}`;

}



// ===================================================================================
// EVENT LISTENERS
// Attaching the handler functions to the DOM elements.
// ===================================================================================

annualIncomeInput.addEventListener("input", updateIncomeCalculations);
provinceSelect.addEventListener("change", updateIncomeCalculations);

includeRetirementCheckbox.addEventListener("change", () => {
  if (includeRetirementCheckbox.checked) {
    retirementPercentageSection.classList.remove("hidden");
  }
  updateIncomeCalculations();
});

excludeRetirementCheckbox.addEventListener("change", () => {
  if (excludeRetirementCheckbox.checked) {
    retirementPercentageSection.classList.add("hidden");
    retirementPercentageInput.value = "";
  }
  updateIncomeCalculations();
});

retirementPercentageInput.addEventListener("input", () => {
  if (validateRetirementPercentage()) {
    updateIncomeCalculations();
  }
});

savingsPercentageInput.addEventListener("input", () => {
  calculatorState.isSavingsCustom = true; // Mark as custom on user input
  if (validateSavingsPercentage(savingsPercentageInput.value)) {
    updateFinalCalculations();
  }
});

investmentsPercentageInput.addEventListener("input", () => {
  calculatorState.isInvestmentsCustom = true; // Mark as custom on user input
  if (validateInvestmentsPercentage(investmentsPercentageInput.value)) {
    updateFinalCalculations();
  }
});


